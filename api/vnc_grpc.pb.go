// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VncRecorderClient is the client API for VncRecorder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VncRecorderClient interface {
	Start(ctx context.Context, in *VncRequest, opts ...grpc.CallOption) (*VncResponse, error)
	Stop(ctx context.Context, in *VncRequest, opts ...grpc.CallOption) (*VncResponse, error)
	Remove(ctx context.Context, in *VncRequest, opts ...grpc.CallOption) (*VncResponse, error)
}

type vncRecorderClient struct {
	cc grpc.ClientConnInterface
}

func NewVncRecorderClient(cc grpc.ClientConnInterface) VncRecorderClient {
	return &vncRecorderClient{cc}
}

func (c *vncRecorderClient) Start(ctx context.Context, in *VncRequest, opts ...grpc.CallOption) (*VncResponse, error) {
	out := new(VncResponse)
	err := c.cc.Invoke(ctx, "/VncRecorder/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vncRecorderClient) Stop(ctx context.Context, in *VncRequest, opts ...grpc.CallOption) (*VncResponse, error) {
	out := new(VncResponse)
	err := c.cc.Invoke(ctx, "/VncRecorder/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vncRecorderClient) Remove(ctx context.Context, in *VncRequest, opts ...grpc.CallOption) (*VncResponse, error) {
	out := new(VncResponse)
	err := c.cc.Invoke(ctx, "/VncRecorder/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VncRecorderServer is the server API for VncRecorder service.
// All implementations must embed UnimplementedVncRecorderServer
// for forward compatibility
type VncRecorderServer interface {
	Start(context.Context, *VncRequest) (*VncResponse, error)
	Stop(context.Context, *VncRequest) (*VncResponse, error)
	Remove(context.Context, *VncRequest) (*VncResponse, error)
	mustEmbedUnimplementedVncRecorderServer()
}

// UnimplementedVncRecorderServer must be embedded to have forward compatible implementations.
type UnimplementedVncRecorderServer struct {
}

func (UnimplementedVncRecorderServer) Start(context.Context, *VncRequest) (*VncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedVncRecorderServer) Stop(context.Context, *VncRequest) (*VncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedVncRecorderServer) Remove(context.Context, *VncRequest) (*VncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedVncRecorderServer) mustEmbedUnimplementedVncRecorderServer() {}

// UnsafeVncRecorderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VncRecorderServer will
// result in compilation errors.
type UnsafeVncRecorderServer interface {
	mustEmbedUnimplementedVncRecorderServer()
}

func RegisterVncRecorderServer(s grpc.ServiceRegistrar, srv VncRecorderServer) {
	s.RegisterService(&VncRecorder_ServiceDesc, srv)
}

func _VncRecorder_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VncRecorderServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VncRecorder/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VncRecorderServer).Start(ctx, req.(*VncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VncRecorder_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VncRecorderServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VncRecorder/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VncRecorderServer).Stop(ctx, req.(*VncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VncRecorder_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VncRecorderServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VncRecorder/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VncRecorderServer).Remove(ctx, req.(*VncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VncRecorder_ServiceDesc is the grpc.ServiceDesc for VncRecorder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VncRecorder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VncRecorder",
	HandlerType: (*VncRecorderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _VncRecorder_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _VncRecorder_Stop_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _VncRecorder_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/vnc.proto",
}
